{"version":3,"sources":["actions/pokemonList.js","actions/types.js","actions/shared.js","utils/utils.js","actions/pokemonTeam.js","components/PokemonMember.js","components/PokemonTeam.js","components/Types.js","components/Dashboard.js","components/App.js","reducers/index.js","reducers/pokemonList.js","reducers/pokemonTeam.js","reducers/types.js","middleware/logger.js","middleware/index.js","serviceWorker.js","index.js"],"names":["RECEIVE_POKEMON_LIST","receivePokemonList","pokemonList","type","RECEIVE_TYPES","receiveTypes","types","fetchData","url","fetch","then","res","json","fetchTypes","results","Promise","all","map","formatName","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","formatPokemonName","slice","ADD_POKEMON_TO_TEAM","REMOVE_POKEMON_FROM_TEAM","handleAddPokemonToTeam","pokemon","id","dispatch","showLoading","pokemonData","addPokemonToTeam","hideLoading","PokemonMember","this","props","Autocomplete","options","onChange","event","value","removePokemonFromTeam","getOptionLabel","option","name","style","width","renderInput","params","TextField","label","parseInt","fullWidth","Component","connect","PokemonTeam","pokemonTeam","margin","Array","e","key","Object","entries","sort","a","b","sprites","front_default","src","alt","href","Types","move_damage_class","formatGenerationName","generation","Dashboard","textAlign","Grid","container","justify","spacing","item","App","loading","constructor","combineReducers","state","action","copy","assign","loadingBar","loadingBarReducer","logger","store","next","console","group","log","returnValue","getState","groupEnd","applyMiddleware","thunk","Boolean","window","location","hostname","match","createStore","reducer","middleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8fa4b6a.chunk.js","sourcesContent":["export const RECEIVE_POKEMON_LIST = \"RECEIVE_POKEMON_LIST\";\n\nexport const receivePokemonList = pokemonList => {\n  return {\n    type: RECEIVE_POKEMON_LIST,\n    pokemonList\n  };\n};\n","export const RECEIVE_TYPES = \"RECEIVE_TYPES\";\n\nexport const receiveTypes = types => {\n  return {\n    type: RECEIVE_TYPES,\n    types\n  };\n};\n","import { receivePokemonList } from \"./pokemonList\";\nimport { receiveTypes } from \"./types\";\nimport { showLoading, hideLoading } from \"react-redux-loading\";\n\nexport const fetchData = url => fetch(url).then(res => res.json());\n\nconst fetchTypes = () =>\n  fetchData(\"https://pokeapi.co/api/v2/type?limit=100\").then(({ results }) =>\n    Promise.all(results.map(type => fetchData(type.url)))\n  );\n\nexport function handleInitialData() {\n  return dispatch => {\n    dispatch(showLoading());\n    return Promise.all([\n      fetchData(\"https://pokeapi.co/api/v2/pokemon?limit=2000\"),\n      fetchTypes()\n    ]).then(([pokemonList, types]) => {\n      dispatch(receivePokemonList(pokemonList.results));\n      dispatch(receiveTypes(types));\n      dispatch(hideLoading());\n    });\n  };\n}\n","export const formatName = str => {\n  var splitStr = str.toLowerCase().split(\"-\");\n  for (var i = 0; i < splitStr.length; i++) {\n    splitStr[i] =\n      splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n  }\n\n  return splitStr.join(\" \");\n};\n\nexport const formatPokemonName = str => {\n  var splitStr = formatName(str).split(\" \");\n\n  if (splitStr.length === 1) {\n    return splitStr[0];\n  }\n\n  return `${splitStr[0]} (${splitStr.slice(1).join(\" \")})`;\n};\n\nexport const formatGenerationName = str => {\n  var splitStr = formatName(str).split(\" \");\n  splitStr[1] = splitStr[1].toUpperCase();\n\n  return splitStr.join(\" \");\n};\n","import { fetchData } from \"./shared\";\nimport { showLoading, hideLoading } from \"react-redux-loading\";\n\nexport const ADD_POKEMON_TO_TEAM = \"ADD_POKEMON_TO_TEAM\";\nexport const REMOVE_POKEMON_FROM_TEAM = \"REMOVE_POKEMON_FROM_TEAM\";\n\nexport const addPokemonToTeam = (pokemon, id) => {\n  return {\n    type: ADD_POKEMON_TO_TEAM,\n    pokemon,\n    id\n  };\n};\n\nexport const handleAddPokemonToTeam = (pokemon, id) => {\n  return dispatch => {\n    dispatch(showLoading());\n    return fetchData(pokemon.url).then(pokemonData => {\n      dispatch(addPokemonToTeam(pokemonData, id));\n      dispatch(hideLoading());\n    });\n  };\n};\n\nexport const removePokemonFromTeam = id => {\n  return {\n    type: REMOVE_POKEMON_FROM_TEAM,\n    id\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { formatPokemonName } from \"../utils/utils\";\nimport {\n  handleAddPokemonToTeam,\n  removePokemonFromTeam\n} from \"../actions/pokemonTeam\";\n\nclass PokemonMember extends Component {\n  render() {\n    const { pokemonList, dispatch, id } = this.props;\n\n    return (\n      <div>\n        <Autocomplete\n          options={pokemonList}\n          onChange={(event, value) => {\n            return value !== null\n              ? dispatch(handleAddPokemonToTeam(value, id))\n              : dispatch(removePokemonFromTeam(id));\n          }}\n          getOptionLabel={option => formatPokemonName(option.name)}\n          style={{ width: 300 }}\n          renderInput={params => (\n            <TextField\n              {...params}\n              label={`PokÃ©mon ${parseInt(id) + 1}`}\n              fullWidth\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(({ pokemonList }) => ({\n  pokemonList\n}))(PokemonMember);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { formatPokemonName } from \"../utils/utils\";\nimport PokemonMember from \"./PokemonMember\";\n\nclass PokemonTeam extends Component {\n  render() {\n    const { pokemonList, pokemonTeam } = this.props;\n\n    return (\n      <div style={{ margin: \"1rem\" }}>\n        <h3>My PokÃ©mon Team</h3>\n        {[...Array(6)].map((e, i) => (\n          <PokemonMember key={i} id={i} />\n        ))}\n        {Object.entries(pokemonTeam).length === 0 ? (\n          <p>No PokÃ©mon added. Add some above!</p>\n        ) : (\n          <div>\n            {Object.entries(pokemonTeam)\n              .sort((a, b) => b[0] > a[0])\n              .map(([id, pokemon]) => (\n                <div key={pokemon.id}>\n                  {pokemon.sprites.front_default && (\n                    <img\n                      src={pokemon.sprites.front_default}\n                      alt={pokemon.name}\n                    />\n                  )}\n                  PokÃ©mon {parseInt(id) + 1}: {formatPokemonName(pokemon.name)}{\" \"}\n                  ({pokemon.types.map(type => type.type.name).join(\", \")})\n                </div>\n              ))}\n          </div>\n        )}\n        <h3>List of all PokÃ©mon</h3>\n        <ul>\n          {pokemonList.map(pokemon => (\n            <li key={pokemon.url}>\n              <a href={pokemon.url}>{formatPokemonName(pokemon.name)}</a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default connect(({ pokemonList, pokemonTeam }) => ({\n  pokemonList,\n  pokemonTeam\n}))(PokemonTeam);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { formatName, formatGenerationName } from \"../utils/utils\";\n\nclass Types extends Component {\n  render() {\n    const { types } = this.props;\n\n    return (\n      <div style={{ margin: \"1rem\" }}>\n        <h3>Types</h3>\n        <ul>\n          {types.map(type => (\n            <li key={type.id}>\n              {formatName(type.name)} (\n              {type.move_damage_class && `${type.move_damage_class.name}, `}\n              {formatGenerationName(type.generation.name)})\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default connect(({ types }) => ({\n  types\n}))(Types);\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PokemonTeam from \"./PokemonTeam\";\nimport Types from \"./Types\";\n\nclass Dashboard extends Component {\n  render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>PokÃ©mon Matchup!</h1>\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid item>\n            <PokemonTeam />\n          </Grid>\n          <Grid item>\n            <Types />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { handleInitialData } from \"../actions/shared\";\nimport \"./App.css\";\nimport LoadingBar from \"react-redux-loading\";\nimport Dashboard from \"./Dashboard\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n  render() {\n    return (\n      <div>\n        <LoadingBar />\n        {this.props.loading ? null : <Dashboard />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ pokemonList, types }) => {\n  return {\n    loading:\n      Object.entries(pokemonList).length === 0 &&\n      pokemonList.constructor === Object &&\n      Object.entries(types).length === 0 &&\n      types.constructor === Object\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\nimport pokemonList from \"./pokemonList\";\nimport pokemonTeam from \"./pokemonTeam\";\nimport types from \"./types\";\nimport { loadingBarReducer } from \"react-redux-loading\";\n\nexport default combineReducers({\n  pokemonList,\n  pokemonTeam,\n  types,\n  loadingBar: loadingBarReducer\n});\n","import { RECEIVE_POKEMON_LIST } from \"../actions/pokemonList\";\n\nexport default function pokemonList(state = [], action) {\n  switch (action.type) {\n    case RECEIVE_POKEMON_LIST:\n      return action.pokemonList;\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_POKEMON_TO_TEAM,\n  REMOVE_POKEMON_FROM_TEAM\n} from \"../actions/pokemonTeam\";\n\nexport default function pokemonTeam(state = [], action) {\n  switch (action.type) {\n    case ADD_POKEMON_TO_TEAM:\n      return {\n        ...state,\n        [action.id]: action.pokemon\n      };\n    case REMOVE_POKEMON_FROM_TEAM:\n      const copy = Object.assign({}, state);\n      delete copy[action.id];\n      return copy;\n    default:\n      return state;\n  }\n}\n","import { RECEIVE_TYPES } from \"../actions/types\";\n\nexport default function types(state = [], action) {\n  switch (action.type) {\n    case RECEIVE_TYPES:\n      return action.types;\n    default:\n      return state;\n  }\n}\n","const logger = store => next => action => {\n  console.group(action.type);\n  console.log(\"The action:\", action);\n  const returnValue = next(action);\n  console.log(\"The new state:\", store.getState());\n  console.groupEnd();\n  return returnValue;\n};\n\nexport default logger;\n","import { applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"./logger\";\n\nexport default applyMiddleware(thunk, logger);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport middleware from \"./middleware\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}